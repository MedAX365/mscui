//-----------------------------------------------------------------------
// <copyright file="MedicationNameCollectionTest.cs" company="Microsoft Corporation and Crown copyright 2007 - 2010.">
// Copyright (c) Microsoft Corporation and Crown copyright 2007 - 2010.
// All rights reserved.
//
// CERTAIN PARTS OF THIS WORK CONTAIN SOFTWARE CODE THAT IS LICENSED 
// FOR USE UNDER THE MICROSOFT PUBLIC LICENSE. DISTRIBUTION, IN SOURCE CODE 
// OR OBJECT CODE FORM, OF THOSE PARTS MUST COMPLY WITH THE TERMS OF THE 
// PUBLIC LICENSE. SEE http://www.microsoft.com/opensource/licenses.mspx 
// FOR DETAILS.  
// IF YOU BRING A PATENT CLAIM AGAINST ANY CONTRIBUTOR OVER PATENTS THAT 
// YOU CLAIM ARE INFRINGED BY THE PUBLIC LICENSE SOFTWARE, YOUR PATENT 
// LICENSE FROM SUCH CONTRIBUTOR TO THE SOFTWARE ENDS AUTOMATICALLY.
//
// THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY 
// KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
// PARTICULAR PURPOSE.
// </copyright>
// <date>02-Feb-2007</date>
// <summary>
// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
// </summary>
//-----------------------------------------------------------------------
namespace NhsCui.Toolkit.Web.Test
{
    #region Using
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using System;
    using System.Text;
    using System.Collections.Generic;
    using NhsCui.Toolkit.Web;
    using System.ComponentModel;
    using System.Threading;
    #endregion

    /// <summary>
    ///This is a test class for NhsCui.Toolkit.Web.MedicationNameCollection and is intended
    ///to contain all NhsCui.Toolkit.Web.MedicationNameCollection Unit Tests
    ///</summary>
    [TestClass()]
    public class MedicationNameCollectionTest : IDisposable
    {
        /// <summary>
        /// Test Context Instance
        /// </summary>
        private TestContext testContextInstance;

        /// <summary>
        /// Reset event to indicate that the propertychanged event was raised
        /// </summary>
        private ManualResetEvent propertyChangedThreadEvent = new ManualResetEvent(false);

        /// <summary>
        /// Name of property reported by the property changed event
        /// </summary>
        private string changedPropertyName;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return this.testContextInstance;
            }

            set
            {
                this.testContextInstance = value;
            }
        }

        #region Additional test attributes
        // You can use the following additional attributes as you write your tests:        
        // Use ClassInitialize to run code before running the first test in the class        
        // [ClassInitialize()]
        // public static void MyClassInitialize(TestContext testContext)
        // {
        // }
        // Use ClassCleanup to run code after all tests in a class have run
        // [ClassCleanup()]
        // public static void MyClassCleanup()
        // {
        // }
        // Use TestInitialize to run code before running each test
        // [TestInitialize()]
        // public void MyTestInitialize()
        // {
        // }
        // Use TestCleanup to run code after each test has run
        // [TestCleanup()]
        // public void MyTestCleanup()
        // {
        // }
        #endregion

        /// <summary>
        ///A test for ClearItems ()
        ///</summary>
        [DeploymentItem("NhsCui.Toolkit.Web.dll")]
        [TestMethod()]
        public void ClearTest()
        {
            MedicationNameCollection target = new MedicationNameCollection();
            target.Add(new MedicationName("Test"));
            target.Add(new MedicationName());
            target.Add(new MedicationName());
            target.Add(new MedicationName());
            target.Clear();
            Assert.AreEqual<int>(0, target.Count, "MedicationNameCollection did not clear the collection");
        }

        /// <summary>
        ///A test for InsertItem
        ///</summary>
        [DeploymentItem("NhsCui.Toolkit.Web.dll")]
        [TestMethod()]
        public void InsertItemTest()
        {
            MedicationNameCollection target = new MedicationNameCollection();
            string name = "Name";
            string info = "Information";
            MedicationName item = new MedicationName(name, info);
            target.Add(item);
            Assert.AreEqual<int>(1, target.Count, "MedicationName was not added correctly");
            Assert.AreEqual<string>(name, target[0].Name, "MedicationName was not added correctly");
            Assert.AreEqual<string>(info, target[0].Information, "MedicationName was not added correctly");
        }

        /// <summary>
        ///A test for OnPropertyChanged (object, PropertyChangedEventArgs)
        ///</summary>
        [DeploymentItem("NhsCui.Toolkit.Web.dll")]
        [TestMethod()]
        public void OnPropertyChangedTest()
        {
            MedicationNameCollection target = new MedicationNameCollection();
            MedicationName item = new MedicationName();
            target.Add(item);

            target.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(this.OnPropertyChanged);
            this.propertyChangedThreadEvent.Reset();            
            
            string name = "NewInfo"; // TODO: Initialize to an appropriate value            
            item.Name = name;
            if (!this.propertyChangedThreadEvent.WaitOne(500, false))
            {
                Assert.Fail("Property Changed event was not raised for Name Property");
            }
            else
            {
                Assert.AreEqual<string>(this.changedPropertyName, "Name");
            }            
        }

        /// <summary>
        ///A test for RemoveItem (int)
        ///</summary>
        [DeploymentItem("NhsCui.Toolkit.Web.dll")]
        [TestMethod()]
        public void RemoveItemTest()
        {
            MedicationNameCollection target = new MedicationNameCollection();
            MedicationName item = new MedicationName("Name", "Info");
            target.Add(item);
            target.Remove(item);
            Assert.AreEqual<int>(0, target.Count, "MedicationName was not removed correctly");
        }

        /// <summary>
        ///A test for SetItem (int, MedicationName)
        ///</summary>
        [DeploymentItem("NhsCui.Toolkit.Web.dll")]
        [TestMethod()]
        public void SetItemTest()
        {
            MedicationNameCollection target = new MedicationNameCollection();
            MedicationName item = new MedicationName("Name1", "Info1");
            target.Add(item);

            MedicationName item2 = new MedicationName("Name2", "Info2");
            target[0] = item2;
            Assert.AreEqual<MedicationName>(item2, target[0], "MedicationNameCollection setitem failed");
        }

        /// <summary>
        ///A test for Validate ()
        ///</summary>
        [DeploymentItem("NhsCui.Toolkit.Web.dll")]
        [TestMethod()]  
        [ExpectedException(typeof(ArgumentOutOfRangeException), "Expected Argument Exception as MaxLength exceed")]
        public void ValidateTest()
        {
            MedicationNameCollection target = new MedicationNameCollection();
            MedicationName name = new MedicationName("Name", "Information");
            int displayLength = name.DisplayLength;
            for (int i = 0; i < (MedicationName.MaximumDisplayLength / displayLength) + 1; i++)
            {
                target.Add(name);
            }
        }

        /// <summary>
        /// Ensure that the Change Event is cleaned up
        /// </summary>
        [TestCleanup()]
        public void Cleanup()
        {
            if (this.propertyChangedThreadEvent != null)
            {
                this.propertyChangedThreadEvent.Close();
            }
        }

        #region IDisposable Members
        /// <summary>
        /// Clean up Property Changed Event
        /// </summary>
        public void Dispose()
        {
            this.Dispose(true);
            GC.SuppressFinalize(this);
        }

        /// <summary>
        /// Dispose
        /// </summary>
        /// <param name="disposing">Dispose</param>
        protected virtual void Dispose(bool disposing)
        {
            if (disposing)
            {
                if (this.propertyChangedThreadEvent != null)
                {
                    this.propertyChangedThreadEvent.Close();
                }
            }
        }
        #endregion

        /// <summary>
        /// Event Handler for Property Changed Event
        /// </summary>
        /// <param name="sender">Sender</param>
        /// <param name="e">Property Changed Event Args</param>
        private void OnPropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            this.changedPropertyName = e.PropertyName;
            this.propertyChangedThreadEvent.Set();
        }
    }
}
