//-----------------------------------------------------------------------
// <copyright file="MedicationTest.cs" company="Microsoft Corporation and Crown copyright 2007 - 2010.">
// Copyright (c) Microsoft Corporation and Crown copyright 2007 - 2010.
// All rights reserved.
//
// CERTAIN PARTS OF THIS WORK CONTAIN SOFTWARE CODE THAT IS LICENSED 
// FOR USE UNDER THE MICROSOFT PUBLIC LICENSE. DISTRIBUTION, IN SOURCE CODE 
// OR OBJECT CODE FORM, OF THOSE PARTS MUST COMPLY WITH THE TERMS OF THE 
// PUBLIC LICENSE. SEE http://www.microsoft.com/opensource/licenses.mspx 
// FOR DETAILS.  
// IF YOU BRING A PATENT CLAIM AGAINST ANY CONTRIBUTOR OVER PATENTS THAT 
// YOU CLAIM ARE INFRINGED BY THE PUBLIC LICENSE SOFTWARE, YOUR PATENT 
// LICENSE FROM SUCH CONTRIBUTOR TO THE SOFTWARE ENDS AUTOMATICALLY.
//
// THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY 
// KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
// PARTICULAR PURPOSE.
// </copyright>
// <date>02-Feb-2007</date>
// <summary>
// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
// </summary>
//-----------------------------------------------------------------------
namespace NhsCui.Toolkit.Web.Test
{
    #region Using
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using System;
    using System.Text;
    using System.Collections.Generic;
    using NhsCui.Toolkit.Web;
    using System.Threading;
    using System.Globalization;
    #endregion

    /// <summary>
    /// This is a test class for NhsCui.Toolkit.Web.Medication and is intended
    /// to contain all NhsCui.Toolkit.Web.Medication Unit Tests
    ///</summary>
    [TestClass()]
    public class MedicationTest : IDisposable
    {
        /// <summary>
        /// Context Instance
        /// </summary>
        private TestContext testContextInstance;

        /// <summary>
        /// Reset event to indicate that the propertychanged event was raised
        /// </summary>
        private ManualResetEvent propertyChangedThreadEvent = new ManualResetEvent(false);

        /// <summary>
        /// Name of property reported by the property changed event
        /// </summary>
        private string changedPropertyName;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return this.testContextInstance;
            }

            set
            {
                this.testContextInstance = value;
            }
        }

        #region Additional test attributes
        // You can use the following additional attributes as you write your tests:        
        // Use ClassInitialize to run code before running the first test in the class        
        // [ClassInitialize()]
        // public static void MyClassInitialize(TestContext testContext)
        // {
        // }
        // Use ClassCleanup to run code after all tests in a class have run
        // [ClassCleanup()]
        // public static void MyClassCleanup()
        // {
        // }
        // Use TestInitialize to run code before running each test
        // [TestInitialize()]
        // public void MyTestInitialize()
        // {
        // }
        // Use TestCleanup to run code after each test has run
        // [TestCleanup()]
        // public void MyTestCleanup()
        // {
        // }
        #endregion

        /// <summary>
        ///A test for CriticalAlertGraphic
        ///</summary>
        [TestMethod()]
        public void CriticalAlertGraphicTest()
        {
            Medication target = new Medication();

            string val = "~/images/test.png";

            target.CriticalAlertGraphic = val;
            Assert.AreEqual(val, target.CriticalAlertGraphic, "NhsCui.Toolkit.Web.Medication.CriticalAlertGraphic was not set correctly.");            
        }

        /// <summary>
        ///A test for DosageText
        ///</summary>
        [TestMethod()]
        public void DosageTextTest()
        {
            Medication target = new Medication();

            string val = "dosageText";

            target.DosageText = val;
            Assert.AreEqual(val, target.DosageText, "NhsCui.Toolkit.Web.Medication.DosageText was not set correctly.");            
        }

        /// <summary>
        ///A test for Dose
        ///</summary>
        [TestMethod()]
        public void DoseTest()
        {
            Medication target = new Medication();

            string val = "dose"; 

            target.Dose = val;
            Assert.AreEqual(val, target.Dose, "NhsCui.Toolkit.Web.Medication.Dose was not set correctly.");            
        }

        /// <summary>
        ///A test for Form
        ///</summary>
        [TestMethod()]
        public void FormTest()
        {
            Medication target = new Medication();

            string val = "form"; 

            target.Form = val;
            Assert.AreEqual(val, target.Form, "NhsCui.Toolkit.Web.Medication.Form was not set correctly.");            
        }

        /// <summary>
        ///A test for Frequency
        ///</summary>
        [TestMethod()]
        public void FrequencyTest()
        {
            Medication target = new Medication();

            string val = "frequency"; 

            target.Frequency = val;
            Assert.AreEqual(val, target.Frequency, "NhsCui.Toolkit.Web.Medication.Frequency was not set correctly.");            
        }

        /// <summary>
        ///A test for IndicatorGraphic
        ///</summary>
        [TestMethod()]
        public void IndicatorGraphicTest()
        {
            Medication target = new Medication();

            string val = "~/images/test.png"; 

            target.IndicatorGraphic = val;
            Assert.AreEqual(val, target.IndicatorGraphic, "NhsCui.Toolkit.Web.Medication.IndicatorGraphic was not set correctly.");            
        }

        /// <summary>
        ///A test for IsSelected
        ///</summary>
        [TestMethod()]
        public void IsSelectedTest()
        {
            Medication target = new Medication();

            bool val = false; 
            target.IsSelected = val;
            Assert.AreEqual(val, target.IsSelected, "NhsCui.Toolkit.Web.Medication.IsSelected was not set correctly.");            
        }

        /// <summary>
        ///A test for MedicationNames
        ///</summary>
        [TestMethod()]
        public void MedicationNamesTest()
        {
            Medication target = new Medication();

            MedicationName item = new MedicationName("Name", "Info");
            target.MedicationNames.Add(item);            
            Assert.AreEqual<MedicationName>(item, target.MedicationNames[0], "NhsCui.Toolkit.Web.Medication.MedicationNames was not set correctly.");            
        }

        /// <summary>
        ///A test for MedicationTooltip
        ///</summary>
        [TestMethod()]
        public void MedicationTooltipTest()
        {
            Medication target = new Medication();
            string val = "Tooltip"; 

            target.MedicationTooltip = val;
            Assert.AreEqual(val, target.MedicationTooltip, "NhsCui.Toolkit.Web.Medication.MedicationTooltip was not set correctly.");            
        }

        /// <summary>
        ///A test for NotifyPropertyChanged (string)
        ///</summary>
        [DeploymentItem("NhsCui.Toolkit.Web.dll")]
        [TestMethod()]
        public void NotifyPropertyChangedTest()
        {
            Medication target = new Medication();
            target.MedicationNames.Add(new MedicationName("Name", "Info"));

            target.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(this.OnPropertyChanged);

            this.propertyChangedThreadEvent.Reset();
            target.CriticalAlertGraphic = "~/images/test.png";
            this.WaitForProperty("CriticalAlertGraphic");

            this.propertyChangedThreadEvent.Reset();
            target.DosageText = "dosageText";
            this.WaitForProperty("DosageText");

            this.propertyChangedThreadEvent.Reset();
            target.Dose = "dose";
            this.WaitForProperty("Dose");

            this.propertyChangedThreadEvent.Reset();
            target.Form = "form";
            this.WaitForProperty("Form");

            this.propertyChangedThreadEvent.Reset();
            target.Frequency = "frequency";
            this.WaitForProperty("Frequency");

            this.propertyChangedThreadEvent.Reset();
            target.IndicatorGraphic = "~/images/test.png";
            this.WaitForProperty("IndicatorGraphic");

            this.propertyChangedThreadEvent.Reset();
            target.IsSelected = true;
            this.WaitForProperty("IsSelected");

            this.propertyChangedThreadEvent.Reset();
            target.MedicationNames[0].Name = "NewName";
            this.WaitForProperty("Name");

            this.propertyChangedThreadEvent.Reset();
            target.MedicationTooltip = "tooltip";
            this.WaitForProperty("MedicationTooltip");

            this.propertyChangedThreadEvent.Reset();
            target.Reason = "reason";
            this.WaitForProperty("Reason");

            this.propertyChangedThreadEvent.Reset();
            target.Route = "route";
            this.WaitForProperty("Route");

            this.propertyChangedThreadEvent.Reset();
            target.StartDate = new DateTime(2007, 1, 1);
            this.WaitForProperty("StartDate");

            this.propertyChangedThreadEvent.Reset();
            target.Status = MedicationStatus.Suspended;
            this.WaitForProperty("Status");

            this.propertyChangedThreadEvent.Reset();
            target.StatusDate = new DateTime(2007, 1, 1);
            this.WaitForProperty("StatusDate");

            this.propertyChangedThreadEvent.Close();
        }

        /// <summary>
        ///A test for Reason
        ///</summary>
        [TestMethod()]
        public void ReasonTest()
        {
            Medication target = new Medication();

            string val = "reason"; 
            target.Reason = val;
            Assert.AreEqual(val, target.Reason, "NhsCui.Tool kit.Web.Medication.Reason was not set correctly.");            
        }

        /// <summary>
        ///A test for Route
        ///</summary>
        [TestMethod()]
        public void RouteTest()
        {
            Medication target = new Medication();

            string val = "route"; 
            target.Route = val;
            Assert.AreEqual(val, target.Route, "NhsCui.Toolkit.Web.Medication.Route was not set correctly.");            
        }

        /// <summary>
        ///A test for StartDate
        ///</summary>
        [TestMethod()]
        public void StartDateTest()
        {
            Medication target = new Medication();

            DateTime val = new DateTime(2007, 1, 1); 
            target.StartDate = val;
            Assert.AreEqual(val, target.StartDate, "NhsCui.Toolkit.Web.Medication.StartDate was not set correctly.");            
        }

        /// <summary>
        ///A test for Status
        ///</summary>
        [TestMethod()]
        public void StatusTest()
        {
            Medication target = new Medication();            
            MedicationStatus val = MedicationStatus.Suspended;            
            target.Status = val;
            Assert.AreEqual(val, target.Status, "NhsCui.Toolkit.Web.Medication.Status was not set correctly.");            
        }

        /// <summary>
        ///A test for StatusDate
        ///</summary>
        [TestMethod()]
        public void StatusDateTest()
        {
            Medication target = new Medication();

            DateTime val = new DateTime(2007, 1, 2); 
            target.StatusDate = val;
            Assert.AreEqual(val, target.StatusDate, "NhsCui.Toolkit.Web.Medication.StatusDate was not set correctly.");            
        }

        /// <summary>
        /// Ensure that the Change Event is cleaned up
        /// </summary>
        [TestCleanup()]
        public void Cleanup()
        {
            if (this.propertyChangedThreadEvent != null)
            {
                this.propertyChangedThreadEvent.Close();
            }
        }

        #region IDisposable Members
        /// <summary>
        /// Clean up Property Changed Event
        /// </summary>
        public void Dispose()
        {
            this.Dispose(true);
            GC.SuppressFinalize(this);
        }

        /// <summary>
        /// Dispose
        /// </summary>
        /// <param name="disposing">Dispose</param>
        protected virtual void Dispose(bool disposing)
        {
            if (disposing)
            {
                if (this.propertyChangedThreadEvent != null)
                {
                    this.propertyChangedThreadEvent.Close();
                }
            }
        }
        #endregion

        /// <summary>
        /// Event Handler for Property Changed Event
        /// </summary>
        /// <param name="sender">Sender</param>
        /// <param name="e">Property Changed Event Args</param>
        private void OnPropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            this.changedPropertyName = e.PropertyName;
            this.propertyChangedThreadEvent.Set();
        }

        /// <summary>
        /// Wait for a property changed event to be raised, and ensure that the correct property event was raised
        /// </summary>
        /// <param name="property">Property</param>
        private void WaitForProperty(string property)
        {
            if (!this.propertyChangedThreadEvent.WaitOne(500, false))
            {
                Assert.Fail(string.Format(CultureInfo.CurrentUICulture, "Property Changed event was not raised for {0} Property", property));
            }
            else
            {
                Assert.AreEqual<string>(this.changedPropertyName, property);
            }
        }
    }
}
