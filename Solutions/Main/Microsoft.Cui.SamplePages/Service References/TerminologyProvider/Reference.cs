//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 2.0.5.0
// 
#pragma warning disable 1591
namespace Microsoft.Cui.SamplePages.TerminologyProvider {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SearchResult", Namespace="http://tempuri.org/")]
    public partial class SearchResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.ObjectModel.ObservableCollection<Microsoft.Cui.SamplePages.TerminologyProvider.TermResult> TermsField;
        
        private bool ExceedsMaxTotalField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Collections.ObjectModel.ObservableCollection<Microsoft.Cui.SamplePages.TerminologyProvider.TermResult> Terms {
            get {
                return this.TermsField;
            }
            set {
                if ((object.ReferenceEquals(this.TermsField, value) != true)) {
                    this.TermsField = value;
                    this.RaisePropertyChanged("Terms");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true, Order=1)]
        public bool ExceedsMaxTotal {
            get {
                return this.ExceedsMaxTotalField;
            }
            set {
                if ((this.ExceedsMaxTotalField.Equals(value) != true)) {
                    this.ExceedsMaxTotalField = value;
                    this.RaisePropertyChanged("ExceedsMaxTotal");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TermResult", Namespace="http://tempuri.org/")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Microsoft.Cui.SamplePages.TerminologyProvider.IndexerResult))]
    public partial class TermResult : Microsoft.Cui.SamplePages.TerminologyProvider.TermItem {
        
        private Microsoft.Cui.SamplePages.TerminologyProvider.ConceptResult ConceptField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Microsoft.Cui.SamplePages.TerminologyProvider.ConceptResult Concept {
            get {
                return this.ConceptField;
            }
            set {
                if ((object.ReferenceEquals(this.ConceptField, value) != true)) {
                    this.ConceptField = value;
                    this.RaisePropertyChanged("Concept");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TermItem", Namespace="http://tempuri.org/")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Microsoft.Cui.SamplePages.TerminologyProvider.TermResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Microsoft.Cui.SamplePages.TerminologyProvider.IndexerResult))]
    public partial class TermItem : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string SnomedDescriptionIdField;
        
        private string DescriptionField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string SnomedDescriptionId {
            get {
                return this.SnomedDescriptionIdField;
            }
            set {
                if ((object.ReferenceEquals(this.SnomedDescriptionIdField, value) != true)) {
                    this.SnomedDescriptionIdField = value;
                    this.RaisePropertyChanged("SnomedDescriptionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IndexerResult", Namespace="http://tempuri.org/")]
    public partial class IndexerResult : Microsoft.Cui.SamplePages.TerminologyProvider.TermResult {
        
        private long StartIndexField;
        
        private long EndIndexField;
        
        private string DomainField;
        
        private double RelevancyField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public long StartIndex {
            get {
                return this.StartIndexField;
            }
            set {
                if ((this.StartIndexField.Equals(value) != true)) {
                    this.StartIndexField = value;
                    this.RaisePropertyChanged("StartIndex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true, Order=1)]
        public long EndIndex {
            get {
                return this.EndIndexField;
            }
            set {
                if ((this.EndIndexField.Equals(value) != true)) {
                    this.EndIndexField = value;
                    this.RaisePropertyChanged("EndIndex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=2)]
        public string Domain {
            get {
                return this.DomainField;
            }
            set {
                if ((object.ReferenceEquals(this.DomainField, value) != true)) {
                    this.DomainField = value;
                    this.RaisePropertyChanged("Domain");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true, Order=3)]
        public double Relevancy {
            get {
                return this.RelevancyField;
            }
            set {
                if ((this.RelevancyField.Equals(value) != true)) {
                    this.RelevancyField = value;
                    this.RaisePropertyChanged("Relevancy");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConceptResult", Namespace="http://tempuri.org/")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Microsoft.Cui.SamplePages.TerminologyProvider.ConceptDetail))]
    public partial class ConceptResult : Microsoft.Cui.SamplePages.TerminologyProvider.ConceptItem {
        
        private System.Collections.ObjectModel.ObservableCollection<Microsoft.Cui.SamplePages.TerminologyProvider.ConceptItem> ParentsField;
        
        private System.Collections.ObjectModel.ObservableCollection<Microsoft.Cui.SamplePages.TerminologyProvider.TermItem> AlternateDescriptionsField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Collections.ObjectModel.ObservableCollection<Microsoft.Cui.SamplePages.TerminologyProvider.ConceptItem> Parents {
            get {
                return this.ParentsField;
            }
            set {
                if ((object.ReferenceEquals(this.ParentsField, value) != true)) {
                    this.ParentsField = value;
                    this.RaisePropertyChanged("Parents");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public System.Collections.ObjectModel.ObservableCollection<Microsoft.Cui.SamplePages.TerminologyProvider.TermItem> AlternateDescriptions {
            get {
                return this.AlternateDescriptionsField;
            }
            set {
                if ((object.ReferenceEquals(this.AlternateDescriptionsField, value) != true)) {
                    this.AlternateDescriptionsField = value;
                    this.RaisePropertyChanged("AlternateDescriptions");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConceptItem", Namespace="http://tempuri.org/")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Microsoft.Cui.SamplePages.TerminologyProvider.ConceptResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Microsoft.Cui.SamplePages.TerminologyProvider.ConceptDetail))]
    public partial class ConceptItem : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string SnomedConceptIdField;
        
        private string PreferredTermField;
        
        private string FullySpecifiedNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string SnomedConceptId {
            get {
                return this.SnomedConceptIdField;
            }
            set {
                if ((object.ReferenceEquals(this.SnomedConceptIdField, value) != true)) {
                    this.SnomedConceptIdField = value;
                    this.RaisePropertyChanged("SnomedConceptId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public string PreferredTerm {
            get {
                return this.PreferredTermField;
            }
            set {
                if ((object.ReferenceEquals(this.PreferredTermField, value) != true)) {
                    this.PreferredTermField = value;
                    this.RaisePropertyChanged("PreferredTerm");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=2)]
        public string FullySpecifiedName {
            get {
                return this.FullySpecifiedNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FullySpecifiedNameField, value) != true)) {
                    this.FullySpecifiedNameField = value;
                    this.RaisePropertyChanged("FullySpecifiedName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConceptDetail", Namespace="http://tempuri.org/")]
    public partial class ConceptDetail : Microsoft.Cui.SamplePages.TerminologyProvider.ConceptResult {
        
        private System.Collections.ObjectModel.ObservableCollection<Microsoft.Cui.SamplePages.TerminologyProvider.RefinableCharacteristic> RefinableCharacteristicsField;
        
        private System.Collections.ObjectModel.ObservableCollection<Microsoft.Cui.SamplePages.TerminologyProvider.RelationResult> RelationsField;
        
        private System.Collections.ObjectModel.ObservableCollection<Microsoft.Cui.SamplePages.TerminologyProvider.ConceptResult> ChildrenField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Collections.ObjectModel.ObservableCollection<Microsoft.Cui.SamplePages.TerminologyProvider.RefinableCharacteristic> RefinableCharacteristics {
            get {
                return this.RefinableCharacteristicsField;
            }
            set {
                if ((object.ReferenceEquals(this.RefinableCharacteristicsField, value) != true)) {
                    this.RefinableCharacteristicsField = value;
                    this.RaisePropertyChanged("RefinableCharacteristics");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Collections.ObjectModel.ObservableCollection<Microsoft.Cui.SamplePages.TerminologyProvider.RelationResult> Relations {
            get {
                return this.RelationsField;
            }
            set {
                if ((object.ReferenceEquals(this.RelationsField, value) != true)) {
                    this.RelationsField = value;
                    this.RaisePropertyChanged("Relations");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=2)]
        public System.Collections.ObjectModel.ObservableCollection<Microsoft.Cui.SamplePages.TerminologyProvider.ConceptResult> Children {
            get {
                return this.ChildrenField;
            }
            set {
                if ((object.ReferenceEquals(this.ChildrenField, value) != true)) {
                    this.ChildrenField = value;
                    this.RaisePropertyChanged("Children");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RefinableCharacteristic", Namespace="http://tempuri.org/")]
    public partial class RefinableCharacteristic : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string NameField;
        
        private System.Collections.ObjectModel.ObservableCollection<Microsoft.Cui.SamplePages.TerminologyProvider.ConceptItem> ValueConceptsField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Collections.ObjectModel.ObservableCollection<Microsoft.Cui.SamplePages.TerminologyProvider.ConceptItem> ValueConcepts {
            get {
                return this.ValueConceptsField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueConceptsField, value) != true)) {
                    this.ValueConceptsField = value;
                    this.RaisePropertyChanged("ValueConcepts");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RelationResult", Namespace="http://tempuri.org/")]
    public partial class RelationResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string NameField;
        
        private System.Collections.ObjectModel.ObservableCollection<Microsoft.Cui.SamplePages.TerminologyProvider.ConceptItem> TargetConceptsField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Collections.ObjectModel.ObservableCollection<Microsoft.Cui.SamplePages.TerminologyProvider.ConceptItem> TargetConcepts {
            get {
                return this.TargetConceptsField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetConceptsField, value) != true)) {
                    this.TargetConceptsField = value;
                    this.RaisePropertyChanged("TargetConcepts");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.mscui.net/Services", ConfigurationName="TerminologyProvider.ITerminologyProvider")]
    public interface ITerminologyProvider {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.mscui.net/Services/ITerminologyProvider/GetRootConcept", ReplyAction="http://www.mscui.net/Services/ITerminologyProvider/GetRootConceptResponse")]
        System.IAsyncResult BeginGetRootConcept(System.AsyncCallback callback, object asyncState);
        
        string EndGetRootConcept(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.mscui.net/Services/ITerminologyProvider/SearchByDescription", ReplyAction="http://www.mscui.net/Services/ITerminologyProvider/SearchByDescriptionResponse")]
        System.IAsyncResult BeginSearchByDescription(string searchText, System.Collections.ObjectModel.ObservableCollection<string> domains, string ancestorConceptId, bool includeAncestor, bool fullText, string locale, int fromIndex, int endIndex, int maxTotal, System.AsyncCallback callback, object asyncState);
        
        Microsoft.Cui.SamplePages.TerminologyProvider.SearchResult EndSearchByDescription(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.mscui.net/Services/ITerminologyProvider/GetConceptDetails", ReplyAction="http://www.mscui.net/Services/ITerminologyProvider/GetConceptDetailsResponse")]
        System.IAsyncResult BeginGetConceptDetails(string snomedConceptId, string locale, System.AsyncCallback callback, object asyncState);
        
        Microsoft.Cui.SamplePages.TerminologyProvider.ConceptDetail EndGetConceptDetails(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.mscui.net/Services/ITerminologyProvider/IndexText", ReplyAction="http://www.mscui.net/Services/ITerminologyProvider/IndexTextResponse")]
        System.IAsyncResult BeginIndexText(string text, System.Collections.ObjectModel.ObservableCollection<string> domains, string ancestorConceptId, bool includeAncestor, string locale, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<Microsoft.Cui.SamplePages.TerminologyProvider.IndexerResult> EndIndexText(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.mscui.net/Services/ITerminologyProvider/GetDomains", ReplyAction="http://www.mscui.net/Services/ITerminologyProvider/GetDomainsResponse")]
        System.IAsyncResult BeginGetDomains(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<string> EndGetDomains(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface ITerminologyProviderChannel : Microsoft.Cui.SamplePages.TerminologyProvider.ITerminologyProvider, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetRootConceptCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRootConceptCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class SearchByDescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SearchByDescriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Microsoft.Cui.SamplePages.TerminologyProvider.SearchResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Microsoft.Cui.SamplePages.TerminologyProvider.SearchResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetConceptDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetConceptDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Microsoft.Cui.SamplePages.TerminologyProvider.ConceptDetail Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Microsoft.Cui.SamplePages.TerminologyProvider.ConceptDetail)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class IndexTextCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IndexTextCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<Microsoft.Cui.SamplePages.TerminologyProvider.IndexerResult> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<Microsoft.Cui.SamplePages.TerminologyProvider.IndexerResult>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetDomainsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDomainsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class TerminologyProviderClient : System.ServiceModel.ClientBase<Microsoft.Cui.SamplePages.TerminologyProvider.ITerminologyProvider>, Microsoft.Cui.SamplePages.TerminologyProvider.ITerminologyProvider {
        
        private BeginOperationDelegate onBeginGetRootConceptDelegate;
        
        private EndOperationDelegate onEndGetRootConceptDelegate;
        
        private System.Threading.SendOrPostCallback onGetRootConceptCompletedDelegate;
        
        private BeginOperationDelegate onBeginSearchByDescriptionDelegate;
        
        private EndOperationDelegate onEndSearchByDescriptionDelegate;
        
        private System.Threading.SendOrPostCallback onSearchByDescriptionCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetConceptDetailsDelegate;
        
        private EndOperationDelegate onEndGetConceptDetailsDelegate;
        
        private System.Threading.SendOrPostCallback onGetConceptDetailsCompletedDelegate;
        
        private BeginOperationDelegate onBeginIndexTextDelegate;
        
        private EndOperationDelegate onEndIndexTextDelegate;
        
        private System.Threading.SendOrPostCallback onIndexTextCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDomainsDelegate;
        
        private EndOperationDelegate onEndGetDomainsDelegate;
        
        private System.Threading.SendOrPostCallback onGetDomainsCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public TerminologyProviderClient() {
        }
        
        public TerminologyProviderClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TerminologyProviderClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TerminologyProviderClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TerminologyProviderClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<GetRootConceptCompletedEventArgs> GetRootConceptCompleted;
        
        public event System.EventHandler<SearchByDescriptionCompletedEventArgs> SearchByDescriptionCompleted;
        
        public event System.EventHandler<GetConceptDetailsCompletedEventArgs> GetConceptDetailsCompleted;
        
        public event System.EventHandler<IndexTextCompletedEventArgs> IndexTextCompleted;
        
        public event System.EventHandler<GetDomainsCompletedEventArgs> GetDomainsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Microsoft.Cui.SamplePages.TerminologyProvider.ITerminologyProvider.BeginGetRootConcept(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRootConcept(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string Microsoft.Cui.SamplePages.TerminologyProvider.ITerminologyProvider.EndGetRootConcept(System.IAsyncResult result) {
            return base.Channel.EndGetRootConcept(result);
        }
        
        private System.IAsyncResult OnBeginGetRootConcept(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((Microsoft.Cui.SamplePages.TerminologyProvider.ITerminologyProvider)(this)).BeginGetRootConcept(callback, asyncState);
        }
        
        private object[] OnEndGetRootConcept(System.IAsyncResult result) {
            string retVal = ((Microsoft.Cui.SamplePages.TerminologyProvider.ITerminologyProvider)(this)).EndGetRootConcept(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRootConceptCompleted(object state) {
            if ((this.GetRootConceptCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRootConceptCompleted(this, new GetRootConceptCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRootConceptAsync() {
            this.GetRootConceptAsync(null);
        }
        
        public void GetRootConceptAsync(object userState) {
            if ((this.onBeginGetRootConceptDelegate == null)) {
                this.onBeginGetRootConceptDelegate = new BeginOperationDelegate(this.OnBeginGetRootConcept);
            }
            if ((this.onEndGetRootConceptDelegate == null)) {
                this.onEndGetRootConceptDelegate = new EndOperationDelegate(this.OnEndGetRootConcept);
            }
            if ((this.onGetRootConceptCompletedDelegate == null)) {
                this.onGetRootConceptCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRootConceptCompleted);
            }
            base.InvokeAsync(this.onBeginGetRootConceptDelegate, null, this.onEndGetRootConceptDelegate, this.onGetRootConceptCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Microsoft.Cui.SamplePages.TerminologyProvider.ITerminologyProvider.BeginSearchByDescription(string searchText, System.Collections.ObjectModel.ObservableCollection<string> domains, string ancestorConceptId, bool includeAncestor, bool fullText, string locale, int fromIndex, int endIndex, int maxTotal, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSearchByDescription(searchText, domains, ancestorConceptId, includeAncestor, fullText, locale, fromIndex, endIndex, maxTotal, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microsoft.Cui.SamplePages.TerminologyProvider.SearchResult Microsoft.Cui.SamplePages.TerminologyProvider.ITerminologyProvider.EndSearchByDescription(System.IAsyncResult result) {
            return base.Channel.EndSearchByDescription(result);
        }
        
        private System.IAsyncResult OnBeginSearchByDescription(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string searchText = ((string)(inValues[0]));
            System.Collections.ObjectModel.ObservableCollection<string> domains = ((System.Collections.ObjectModel.ObservableCollection<string>)(inValues[1]));
            string ancestorConceptId = ((string)(inValues[2]));
            bool includeAncestor = ((bool)(inValues[3]));
            bool fullText = ((bool)(inValues[4]));
            string locale = ((string)(inValues[5]));
            int fromIndex = ((int)(inValues[6]));
            int endIndex = ((int)(inValues[7]));
            int maxTotal = ((int)(inValues[8]));
            return ((Microsoft.Cui.SamplePages.TerminologyProvider.ITerminologyProvider)(this)).BeginSearchByDescription(searchText, domains, ancestorConceptId, includeAncestor, fullText, locale, fromIndex, endIndex, maxTotal, callback, asyncState);
        }
        
        private object[] OnEndSearchByDescription(System.IAsyncResult result) {
            Microsoft.Cui.SamplePages.TerminologyProvider.SearchResult retVal = ((Microsoft.Cui.SamplePages.TerminologyProvider.ITerminologyProvider)(this)).EndSearchByDescription(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSearchByDescriptionCompleted(object state) {
            if ((this.SearchByDescriptionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SearchByDescriptionCompleted(this, new SearchByDescriptionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SearchByDescriptionAsync(string searchText, System.Collections.ObjectModel.ObservableCollection<string> domains, string ancestorConceptId, bool includeAncestor, bool fullText, string locale, int fromIndex, int endIndex, int maxTotal) {
            this.SearchByDescriptionAsync(searchText, domains, ancestorConceptId, includeAncestor, fullText, locale, fromIndex, endIndex, maxTotal, null);
        }
        
        public void SearchByDescriptionAsync(string searchText, System.Collections.ObjectModel.ObservableCollection<string> domains, string ancestorConceptId, bool includeAncestor, bool fullText, string locale, int fromIndex, int endIndex, int maxTotal, object userState) {
            if ((this.onBeginSearchByDescriptionDelegate == null)) {
                this.onBeginSearchByDescriptionDelegate = new BeginOperationDelegate(this.OnBeginSearchByDescription);
            }
            if ((this.onEndSearchByDescriptionDelegate == null)) {
                this.onEndSearchByDescriptionDelegate = new EndOperationDelegate(this.OnEndSearchByDescription);
            }
            if ((this.onSearchByDescriptionCompletedDelegate == null)) {
                this.onSearchByDescriptionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSearchByDescriptionCompleted);
            }
            base.InvokeAsync(this.onBeginSearchByDescriptionDelegate, new object[] {
                        searchText,
                        domains,
                        ancestorConceptId,
                        includeAncestor,
                        fullText,
                        locale,
                        fromIndex,
                        endIndex,
                        maxTotal}, this.onEndSearchByDescriptionDelegate, this.onSearchByDescriptionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Microsoft.Cui.SamplePages.TerminologyProvider.ITerminologyProvider.BeginGetConceptDetails(string snomedConceptId, string locale, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetConceptDetails(snomedConceptId, locale, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Microsoft.Cui.SamplePages.TerminologyProvider.ConceptDetail Microsoft.Cui.SamplePages.TerminologyProvider.ITerminologyProvider.EndGetConceptDetails(System.IAsyncResult result) {
            return base.Channel.EndGetConceptDetails(result);
        }
        
        private System.IAsyncResult OnBeginGetConceptDetails(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string snomedConceptId = ((string)(inValues[0]));
            string locale = ((string)(inValues[1]));
            return ((Microsoft.Cui.SamplePages.TerminologyProvider.ITerminologyProvider)(this)).BeginGetConceptDetails(snomedConceptId, locale, callback, asyncState);
        }
        
        private object[] OnEndGetConceptDetails(System.IAsyncResult result) {
            Microsoft.Cui.SamplePages.TerminologyProvider.ConceptDetail retVal = ((Microsoft.Cui.SamplePages.TerminologyProvider.ITerminologyProvider)(this)).EndGetConceptDetails(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetConceptDetailsCompleted(object state) {
            if ((this.GetConceptDetailsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetConceptDetailsCompleted(this, new GetConceptDetailsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetConceptDetailsAsync(string snomedConceptId, string locale) {
            this.GetConceptDetailsAsync(snomedConceptId, locale, null);
        }
        
        public void GetConceptDetailsAsync(string snomedConceptId, string locale, object userState) {
            if ((this.onBeginGetConceptDetailsDelegate == null)) {
                this.onBeginGetConceptDetailsDelegate = new BeginOperationDelegate(this.OnBeginGetConceptDetails);
            }
            if ((this.onEndGetConceptDetailsDelegate == null)) {
                this.onEndGetConceptDetailsDelegate = new EndOperationDelegate(this.OnEndGetConceptDetails);
            }
            if ((this.onGetConceptDetailsCompletedDelegate == null)) {
                this.onGetConceptDetailsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetConceptDetailsCompleted);
            }
            base.InvokeAsync(this.onBeginGetConceptDetailsDelegate, new object[] {
                        snomedConceptId,
                        locale}, this.onEndGetConceptDetailsDelegate, this.onGetConceptDetailsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Microsoft.Cui.SamplePages.TerminologyProvider.ITerminologyProvider.BeginIndexText(string text, System.Collections.ObjectModel.ObservableCollection<string> domains, string ancestorConceptId, bool includeAncestor, string locale, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIndexText(text, domains, ancestorConceptId, includeAncestor, locale, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<Microsoft.Cui.SamplePages.TerminologyProvider.IndexerResult> Microsoft.Cui.SamplePages.TerminologyProvider.ITerminologyProvider.EndIndexText(System.IAsyncResult result) {
            return base.Channel.EndIndexText(result);
        }
        
        private System.IAsyncResult OnBeginIndexText(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string text = ((string)(inValues[0]));
            System.Collections.ObjectModel.ObservableCollection<string> domains = ((System.Collections.ObjectModel.ObservableCollection<string>)(inValues[1]));
            string ancestorConceptId = ((string)(inValues[2]));
            bool includeAncestor = ((bool)(inValues[3]));
            string locale = ((string)(inValues[4]));
            return ((Microsoft.Cui.SamplePages.TerminologyProvider.ITerminologyProvider)(this)).BeginIndexText(text, domains, ancestorConceptId, includeAncestor, locale, callback, asyncState);
        }
        
        private object[] OnEndIndexText(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<Microsoft.Cui.SamplePages.TerminologyProvider.IndexerResult> retVal = ((Microsoft.Cui.SamplePages.TerminologyProvider.ITerminologyProvider)(this)).EndIndexText(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIndexTextCompleted(object state) {
            if ((this.IndexTextCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IndexTextCompleted(this, new IndexTextCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IndexTextAsync(string text, System.Collections.ObjectModel.ObservableCollection<string> domains, string ancestorConceptId, bool includeAncestor, string locale) {
            this.IndexTextAsync(text, domains, ancestorConceptId, includeAncestor, locale, null);
        }
        
        public void IndexTextAsync(string text, System.Collections.ObjectModel.ObservableCollection<string> domains, string ancestorConceptId, bool includeAncestor, string locale, object userState) {
            if ((this.onBeginIndexTextDelegate == null)) {
                this.onBeginIndexTextDelegate = new BeginOperationDelegate(this.OnBeginIndexText);
            }
            if ((this.onEndIndexTextDelegate == null)) {
                this.onEndIndexTextDelegate = new EndOperationDelegate(this.OnEndIndexText);
            }
            if ((this.onIndexTextCompletedDelegate == null)) {
                this.onIndexTextCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIndexTextCompleted);
            }
            base.InvokeAsync(this.onBeginIndexTextDelegate, new object[] {
                        text,
                        domains,
                        ancestorConceptId,
                        includeAncestor,
                        locale}, this.onEndIndexTextDelegate, this.onIndexTextCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Microsoft.Cui.SamplePages.TerminologyProvider.ITerminologyProvider.BeginGetDomains(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDomains(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<string> Microsoft.Cui.SamplePages.TerminologyProvider.ITerminologyProvider.EndGetDomains(System.IAsyncResult result) {
            return base.Channel.EndGetDomains(result);
        }
        
        private System.IAsyncResult OnBeginGetDomains(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((Microsoft.Cui.SamplePages.TerminologyProvider.ITerminologyProvider)(this)).BeginGetDomains(callback, asyncState);
        }
        
        private object[] OnEndGetDomains(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<string> retVal = ((Microsoft.Cui.SamplePages.TerminologyProvider.ITerminologyProvider)(this)).EndGetDomains(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDomainsCompleted(object state) {
            if ((this.GetDomainsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDomainsCompleted(this, new GetDomainsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDomainsAsync() {
            this.GetDomainsAsync(null);
        }
        
        public void GetDomainsAsync(object userState) {
            if ((this.onBeginGetDomainsDelegate == null)) {
                this.onBeginGetDomainsDelegate = new BeginOperationDelegate(this.OnBeginGetDomains);
            }
            if ((this.onEndGetDomainsDelegate == null)) {
                this.onEndGetDomainsDelegate = new EndOperationDelegate(this.OnEndGetDomains);
            }
            if ((this.onGetDomainsCompletedDelegate == null)) {
                this.onGetDomainsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDomainsCompleted);
            }
            base.InvokeAsync(this.onBeginGetDomainsDelegate, null, this.onEndGetDomainsDelegate, this.onGetDomainsCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Microsoft.Cui.SamplePages.TerminologyProvider.ITerminologyProvider CreateChannel() {
            return new TerminologyProviderClientChannel(this);
        }
        
        private class TerminologyProviderClientChannel : ChannelBase<Microsoft.Cui.SamplePages.TerminologyProvider.ITerminologyProvider>, Microsoft.Cui.SamplePages.TerminologyProvider.ITerminologyProvider {
            
            public TerminologyProviderClientChannel(System.ServiceModel.ClientBase<Microsoft.Cui.SamplePages.TerminologyProvider.ITerminologyProvider> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetRootConcept(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetRootConcept", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetRootConcept(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetRootConcept", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSearchByDescription(string searchText, System.Collections.ObjectModel.ObservableCollection<string> domains, string ancestorConceptId, bool includeAncestor, bool fullText, string locale, int fromIndex, int endIndex, int maxTotal, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[9];
                _args[0] = searchText;
                _args[1] = domains;
                _args[2] = ancestorConceptId;
                _args[3] = includeAncestor;
                _args[4] = fullText;
                _args[5] = locale;
                _args[6] = fromIndex;
                _args[7] = endIndex;
                _args[8] = maxTotal;
                System.IAsyncResult _result = base.BeginInvoke("SearchByDescription", _args, callback, asyncState);
                return _result;
            }
            
            public Microsoft.Cui.SamplePages.TerminologyProvider.SearchResult EndSearchByDescription(System.IAsyncResult result) {
                object[] _args = new object[0];
                Microsoft.Cui.SamplePages.TerminologyProvider.SearchResult _result = ((Microsoft.Cui.SamplePages.TerminologyProvider.SearchResult)(base.EndInvoke("SearchByDescription", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetConceptDetails(string snomedConceptId, string locale, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = snomedConceptId;
                _args[1] = locale;
                System.IAsyncResult _result = base.BeginInvoke("GetConceptDetails", _args, callback, asyncState);
                return _result;
            }
            
            public Microsoft.Cui.SamplePages.TerminologyProvider.ConceptDetail EndGetConceptDetails(System.IAsyncResult result) {
                object[] _args = new object[0];
                Microsoft.Cui.SamplePages.TerminologyProvider.ConceptDetail _result = ((Microsoft.Cui.SamplePages.TerminologyProvider.ConceptDetail)(base.EndInvoke("GetConceptDetails", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginIndexText(string text, System.Collections.ObjectModel.ObservableCollection<string> domains, string ancestorConceptId, bool includeAncestor, string locale, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = text;
                _args[1] = domains;
                _args[2] = ancestorConceptId;
                _args[3] = includeAncestor;
                _args[4] = locale;
                System.IAsyncResult _result = base.BeginInvoke("IndexText", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<Microsoft.Cui.SamplePages.TerminologyProvider.IndexerResult> EndIndexText(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<Microsoft.Cui.SamplePages.TerminologyProvider.IndexerResult> _result = ((System.Collections.ObjectModel.ObservableCollection<Microsoft.Cui.SamplePages.TerminologyProvider.IndexerResult>)(base.EndInvoke("IndexText", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetDomains(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetDomains", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<string> EndGetDomains(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<string> _result = ((System.Collections.ObjectModel.ObservableCollection<string>)(base.EndInvoke("GetDomains", _args, result)));
                return _result;
            }
        }
    }
}
